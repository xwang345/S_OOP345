Script started on Fri 31 Mar 2017 01:39:10 PM EDT
szhang146@matrix:~/Semester3/oop345/milestone2> whoami
szhang146
szhang146@matrix:~/Semester3/oop345/milestone2> cat util.h util.cpp task.h task.cpp
#pragma once
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

std::string& trim(std::string& s, char trimChar = ' ');

void csvReader(std::string& filename, char delim, std::vector< std::vector<std::string> > &csv);

void csvPrint(std::vector< std::vector< std::string >> &csvData);

bool validTaskName(std::string &s);

bool validSlots(std::string &s);
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include "util.h"
std::string& trim(std::string& s, char trimChar)
{
   while (!s.empty() && s[0] == trimChar)
      s.erase(0, 1);

   while (!s.empty() && s[s.size() - 1] == trimChar)
      s.erase(s.size() - 1, 1);

   return s;
}

#define PROCESS_DOUBLE_QUOTES
void csvReader(std::string& filename, char delim, std::vector< std::vector<std::string> > &csv)
{
   std::ifstream is(filename);
   if (is) {
      std::string line;
      std::vector<std::string> fields;

      while (getline(is, line)) {
         auto cr = line.find('\r');
         if (cr != std::string::npos)
            line.erase(cr, 1);

         std::string field;
         for (size_t i = 0; i < line.size(); i++) {
#ifdef PROCESS_DOUBLE_QUOTES
            if (line[i] == '"') {
               field += line[i];        // copy 1st "
               for (i++; i < line.size(); i++) {
                  field += line[i];
                  if (line[i] == '"')     // found 2nd "
                     break;
               }
            }
            else
#endif
               if (line[i] != delim) {
                  field += line[i];
               }
               else {
                  trim(field);
                  if (!field.empty())
                     fields.push_back(move(field));
                  // field.clear(); // not needed if we do a move
               }
         }
         trim(field);
         if (!field.empty())
            fields.push_back(field);
         if (!fields.empty())
            csv.push_back(move(fields));
         // field.clear(); // not needed if we do a move
      }
      is.close();
   }
   else {
      std::cerr << "cannot open file " << filename << "\n";
   }
}

void csvPrint(std::vector< std::vector<std::string> > &csv)
{


   // Method 1 - range-based for loop: 
   for (auto row : csv) {
      for (auto column : row) {
         std::cout << column << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";

   // Method 2 - conventional for loop
   for (size_t row = 0; row < csv.size(); row++) {
      for (size_t column = 0; column < csv[row].size(); column++) {
         std::cout << csv[row][column] << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";

   // Method 3 - iterator for loop
   for (auto row = csv.begin(); row < csv.end(); row++) {
      for (auto column = row->begin(); column < row->end(); column++) {
         std::cout << *column << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";
}
bool validTaskName(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}

bool validSlots(std::string &s) {
   for (auto c : s)
      if (!(isdigit(c)))
         return false;
   return true;
}#pragma once
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include "util.h"
class Task
{
   std::string taskName, taskSlots, taskPass, taskFail;
public:
   //Task();
   Task(std::vector<std::string>& row);
   std::string& getName() { return taskName; }
   std::string& getSlots() { return taskSlots; }
   std::string& getPass() { return taskPass; }
   std::string& getFail() { return taskFail; }
   void print();
   void graph(std::fstream& os);
};
class TaskManager
{
   std::vector<Task> taskList;
public:
   TaskManager(std::vector<std::vector<std::string>> &csvData);
   Task* find(std::string name)
   {
      for (size_t i = 0; i < taskList.size(); i++)
      {
         if (name == taskList[i].getName())
         {
            return &taskList[i];
         }
      }
      return nullptr;
   }
   void print();
   void graph(std::string& filename);
   bool validate()
   {
      int errors = 0;
      for (auto task : taskList)
      {
         if (!task.getPass().empty() && find(task.getPass()) == nullptr)
         {
            errors++;
            std::cerr << "Task " << task.getName() << " references unknown pass task " << task.getPass() << std::endl;
         }
         if (!task.getFail().empty() && find(task.getFail()) == nullptr)
         {
            errors++;
            std::cerr << "Task " << task.getName() << " references unknow fail task " << task.getFail() << std::endl;
         }
      }
      return errors == 0;
   }
};#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#include "task.h"
#include "util.h"
using namespace std;

Task::Task(std::vector<std::string>& row) :taskSlots("1") {
   switch (row.size()) {
   case 4:
      if (validTaskName(row[3]))
         taskFail = row[3];
      else
         throw std::string("Expected a fail task name --- found '") + row[3] + "'";
   case 3:
      if (validTaskName(row[2]))
         taskPass = row[2];
      else
         throw std::string("Expected a pass task name --- found '") + row[2] + "'";
   case 2:
      if (validSlots(row[1]))
         taskSlots = row[1];
      else
         throw std::string("Expected a slots --- found '") + row[1] + "'";
   case 1:
      if (validTaskName(row[0]))
         taskName = row[0];
      else
         throw std::string("Expected a pass task name --- found '") + row[0] + "'";
      break;
   default:
      throw std::string("Ecxpected 1,2,3, or 4 feilds, found ") + std::to_string(row.size());
   }
}
void Task::print()
{
   std::cout << " /Name/Slots/Pass/Fail/ = "
      << "/" << taskName
      << "/" << taskSlots
      << "/" << taskPass
      << "/" << taskFail
      << "/" << std::endl;
}
void Task::graph(std::fstream& os)
{
   std::string q = "\"";
   if (!(taskPass.empty()))
      os << q << taskName << q << " -> " << q << taskPass << q << " [color=green];\n";
   if (!(taskFail.empty()))
      os << q << taskName << q << " -> " << q << taskFail << q << " [color=red];\n";
   if (taskPass.empty() && taskFail.empty())
      os << q << taskName << q << ";\n";
}
TaskManager::TaskManager(std::vector<std::vector<std::string>>& csvData)
{
   for (auto& row : csvData) {
      try {
         taskList.push_back(std::move(Task(row)));
      }
      catch (const std::string& e) {
         std::cerr << e << std::endl;
      }
   }
}
void TaskManager::print() {
   for (auto t : taskList)
      t.print();
}
void TaskManager::graph(std::string& filename)
{
   std::string f = filename + ".gv";
   std::fstream os(f, std::ios::out | std::ios::trunc);
   os << "digraph taskGraph {\n";
   for (auto t : taskList)
   {
      t.graph(os);
   }
   os << "}" << std::endl;
   os.close();

   std::string cmd = std::string("dot -Tpng ") + filename + ".gv > " + filename + ".gv.png";

   std::cout << cmd << " returned " << system(cmd.c_str()) << "\n";
}


int main(int argc, char* argv[]){
	try{
		/*if(argc != 3)
			throw std::string("Usage: ") + argv[0] + " csv-data-file csv-seperator-character";
      std::string fileName = argv[1];
		char seperator = argv[2][0];
		
      std::vector< std::vector<std::string> > csvData;
      csvReader(fileName, seperator, csvData);
		csvPrint( csvData );
		
		TaskManager tm(csvData);*/

      if (argc != 5)
         throw string("Usage : ") + argv[0] + " item-csv order-csv task-csv csv-seperator";
      string fileItemName = argv[1];
      string fileOrderName = argv[2];
      string fileTaskName = argv[3];
      char seperator = argv[4][0];
      vector<vector<string>> csvItemData;
      vector<vector<string>> csvOrderData;
      vector<vector<string>> csvTaskData;
      csvReader(fileItemName, seperator, csvItemData);
      csvReader(fileOrderName, seperator, csvOrderData);
      csvReader(fileTaskName, seperator, csvTaskData);
      TaskManager tm(csvTaskData);
      tm.print();
      tm.graph(fileTaskName);

	} catch(const std::string& e){
      std::cerr << e << "\n";
	}	
}
szhang146@matrix:~/Semester3/oop345/milestone2> g++ -std=c++0x util.cpp task.cpp -o m2
szhang146@matrix:~/Semester3/oop345/milestone2> ./m2 dat/ItemList_Clean.dat dat/CustomerOrders_Clean.dat dat/TaskList_Clean.dat  '|'
 /Name/Slots/Pass/Fail/ = /Power Supply/4/Motherboard//
 /Name/Slots/Pass/Fail/ = /Motherboard/3/CPU/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /CPU/5/Memory/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /Memory/4/SSD/Remove Memory/
 /Name/Slots/Pass/Fail/ = /Remove Memory/1/Memory//
 /Name/Slots/Pass/Fail/ = /SSD/4/GPU/Remove SSD/
 /Name/Slots/Pass/Fail/ = /Remove SSD/1/SSD//
 /Name/Slots/Pass/Fail/ = /GPU/3/Test//
 /Name/Slots/Pass/Fail/ = /Test/4/Approve/Repair/
 /Name/Slots/Pass/Fail/ = /Repair/1///
 /Name/Slots/Pass/Fail/ = /Approve/1///
dot -Tpng dat/TaskList_Clean.dat.gv > dat/TaskList_Clean.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone2> ./m2 dat/ItemList_Whitespace.dat dat/CustomerOrders_Whitespace.dat dat/TaskList_Whitespace.dat  '|'
 /Name/Slots/Pass/Fail/ = /Power Supply/4/Motherboard//
 /Name/Slots/Pass/Fail/ = /Motherboard/3/CPU/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /CPU/5/Memory/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /Memory/4/SSD/Remove Memory/
 /Name/Slots/Pass/Fail/ = /Remove Memory/1/Memory//
 /Name/Slots/Pass/Fail/ = /SSD/4/GPU/Remove SSD/
 /Name/Slots/Pass/Fail/ = /Remove SSD/1/SSD//
 /Name/Slots/Pass/Fail/ = /GPU/3/Test//
 /Name/Slots/Pass/Fail/ = /Test/4/Approve/Repair/
 /Name/Slots/Pass/Fail/ = /Repair/1///
 /Name/Slots/Pass/Fail/ = /Approve/1///
dot -Tpng dat/TaskList_Whitespace.dat.gv > dat/TaskList_Whitespace.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone2> ./m2 dat/ItemList_Malformed.dat dat/CustomerOrders_Malformed.dat dat/TaskList_Malformed.dat  '|'
 /Name/Slots/Pass/Fail/ = /Power Supply/4/Motherboard//
 /Name/Slots/Pass/Fail/ = /Motherboard/3/CPU/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /CPU/5/Memory/Remove CPU/
 /Name/Slots/Pass/Fail/ = /Remove CPU/1/CPU//
 /Name/Slots/Pass/Fail/ = /Memory/4/SSD/Remove Memory/
 /Name/Slots/Pass/Fail/ = /Remove Memory/1/Memory//
 /Name/Slots/Pass/Fail/ = /SSD/4/GPU/Remove SSD/
 /Name/Slots/Pass/Fail/ = /Remove SSD/1/SSD//
 /Name/Slots/Pass/Fail/ = /GPU/3/Test//
 /Name/Slots/Pass/Fail/ = /Test/4/Approve/Repair/
 /Name/Slots/Pass/Fail/ = /Repair/1///
 /Name/Slots/Pass/Fail/ = /Approve/1///
dot -Tpng dat/TaskList_Malformed.dat.gv > dat/TaskList_Malformed.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone2> ./m2 dat/FishTankItems.dat dat/FishTankCustomerOrders.dat dat/FishTankTasks.dat ','
 /Name/Slots/Pass/Fail/ = /SetupTank/2/AddGravel//
 /Name/Slots/Pass/Fail/ = /RemoveTank/1/SetupTank//
 /Name/Slots/Pass/Fail/ = /AddGravel/5/AssembleFilter/RemoveGravel/
 /Name/Slots/Pass/Fail/ = /RemoveGravel/1/AddGravel//
 /Name/Slots/Pass/Fail/ = /AssembleFilter/5/InstallLighting/DisassembleFilter/
 /Name/Slots/Pass/Fail/ = /DisassembleFilter/1/AssembleFilter//
 /Name/Slots/Pass/Fail/ = /InstallLighting/2/AddHeater/ReplaceLighting/
 /Name/Slots/Pass/Fail/ = /ReplaceLighting/1/InstallLighting//
 /Name/Slots/Pass/Fail/ = /AddHeater/5/AddWater/RemoveHeater/
 /Name/Slots/Pass/Fail/ = /RemoveHeater/1/AddHeater//
 /Name/Slots/Pass/Fail/ = /AddWater/5/AddRocks/DrainWater/
 /Name/Slots/Pass/Fail/ = /DrainWater/1/AddWater//
 /Name/Slots/Pass/Fail/ = /AddRocks/8/AddFish/RemoveRocks/
 /Name/Slots/Pass/Fail/ = /RemoveRocks/1/AddRocks/AddFish/
 /Name/Slots/Pass/Fail/ = /AddFish/10/AddCoral/CatchFish/
 /Name/Slots/Pass/Fail/ = /CatchFish/1/AddFish/AddCoral/
 /Name/Slots/Pass/Fail/ = /AddCoral/5/AddToys/RemoveCoral/
 /Name/Slots/Pass/Fail/ = /RemoveCoral/1/AddCoral/AddToys/
 /Name/Slots/Pass/Fail/ = /AddToys/4///
 /Name/Slots/Pass/Fail/ = /RemoveToys/1///
dot -Tpng dat/FishTankTasks.dat.gv > dat/FishTankTasks.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone2> exit
exit

Script done on Fri 31 Mar 2017 01:40:48 PM EDT

Script started on Thu 16 Feb 2017 08:35:03 PM EST
szhang146@matrix:~/Semester3/oop345/lab5> whoami
szhang146
szhang146@matrix:~/Semester3/oop345/lab5> cat w5.cpp Notifications.* Message.*
// Workshop 5 - Containers
// w5.cpp

#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
   w5::Notifications notifications;

   do {
      w5::Message message(in, recDelim);
      if (!message.empty())
         notifications += std::move(message);
   } while (in);

   return notifications;
}

int main(int argc, char* argv[]) {
   if (argc == 1) {
      std::cerr << argv[0] << ": missing file operand\n";
      return 1;
   }
   else if (argc != 2) {
      std::cerr << argv[0] << ": too many arguments\n";
      return 2;
   }
   std::ifstream file(argv[1]);
   if (!file) {
      std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
      return 3;
   }

   std::cout << "\nNotifications\n=============\n\n";
   w5::Notifications notifications = collect(file, REC_DELIMITER);

   notifications.display(std::cout);

   std::cout << "Press any key to continue ... ";
   std::cin.get();
}#include "Notifications.h"
#include <fstream>
#include <iostream>
#include <string>
using namespace w5;

Notifications::Notifications()
   : messageTable(nullptr), messageCount(0) {
}

Notifications::Notifications(const Notifications& rhs)  // copy constructor
   : messageTable(nullptr), messageCount(0) {
   messageCount = rhs.messageCount;
   if (rhs.messageTable) {
      // deep copy
      for (int i = 0; i < messageCount; i++)
         messageTable[i] = rhs.messageTable[i];
   }
}

Notifications& Notifications::operator=(const Notifications& rhs) { // copy assignment
   if (this != &rhs)
      delete[] messageTable;

   if (rhs.messageTable) {
      //deep copy
      for (int i = 0; i < messageCount; i++)
         messageTable[i] = rhs.messageTable[i];
   }

   return *this;
}

Notifications::Notifications(Notifications&& rhs)
   : messageTable(nullptr), messageCount(0) { // move constructor
   rhs.messageTable = nullptr; 
   rhs.messageTable = 0;
}

Notifications&& Notifications::operator=(Notifications&& rhs) { // move assignment
   if (this != &rhs) {
      delete[] messageTable;
      messageTable = rhs.messageTable;
      messageCount = rhs.messageCount;

      rhs.messageTable = nullptr;
      rhs.messageCount = 0;
   }
   return std::move(*this);
}

Notifications::~Notifications() {
   delete[] messageTable;
}

void Notifications::operator+=(const Message& msg) { // adds msg to the set
   if (messageTable == nullptr)
      messageTable = new Message[MAX_SIZE];
   if (messageCount < MAX_SIZE) {
      messageTable[messageCount] = msg;
      messageCount++;
   }
}

void Notifications::display(std::ostream& os) const { 
   for (int i = 0; i < messageCount; i++)
      messageTable[i].display(os);
}
#pragma once
#include "Message.h"

namespace w5 {
   const int MAX_SIZE = 10;
   class Notifications {
      Message* messageTable;
      int      messageCount;
   public:
      Notifications();
      Notifications(const Notifications& rhs);
      Notifications& operator=(const Notifications& rhs);
      Notifications(Notifications&& rhs);
      Notifications&& operator=(Notifications&& rhs);
      ~Notifications();
      void operator+=(const Message& msg);
      void display(std::ostream& os) const;
   };
}#include "Message.h"
#include <fstream>
#include <iostream>
#include <string>
using namespace w5;      

Message::Message() {
}

Message::Message(std::ifstream& in, char c) {
   std::string line;
   getline(in, line, c);
   auto cr = line.find('\r');
   if (cr != std::string::npos)
      line.erase(cr);
   size_t index = 0;
   while (index < line.size()) {
      if (line[index] == ' ') break;
      name += line[index];
      index++;
   }
   index++;
   if (index < line.size() && line[index] == '@') {
      index++;
      while (index < line.size()) {
         if (line[index] == ' ') break;
         reply += line[index];
         index++;
      }
      index++;
   }
   while (index < line.size()) {
      tweet += line[index];
      index++;
   }
}

bool Message::empty() const {
   return tweet.empty();
}

void Message::display(std::ostream& os) const {
   os << "Message\n";
   os << "User   :" << name << "\n";
   if (reply != "")
	   os << "Reply  :" << reply << "\n";
   os << "Tweet  :" << tweet << "\n";
   os << "\n";
}
#pragma once
#include <iostream>

namespace w5 {
   class Message{
      std::string name, reply, tweet;
      
   public:
      Message();
      Message(std::ifstream& in, char c);
      bool empty() const;
      void display(std::ostream& os) const;
   };
}szhang146@matrix:~/Semester3/oop345/lab5> g++ -o w5 -std=c++0x w5.cpp Notificati ons.cpp Message.cpp
szhang146@matrix:~/Semester3/oop345/lab5> w5 w5_test.dat

Notifications
=============

Message
User   :jim
Tweet  :Workshop 5 is cool

Message
User   :harry
Reply  :jim
Tweet  :working on workshop 5 now

Message
User   :dave
Tweet  :what the ^#$%!

Message
User   :john
Reply  :harry
Tweet  :I'm done

Press any key to continue ... exit    
szhang146@matrix:~/Semester3/oop345/lab5> exit
exit

Script done on Thu 16 Feb 2017 08:35:24 PM EST

Script started on Mon 06 Feb 2017 10:28:36 PM EST
szhang146@matrix:~/Semester3/oop345/lab3> whoami
szhang146
szhang146@matrix:~/Semester3/oop345/lab3> cat w3.cpp Text.h Text.cpp
// Workshop 3 - Copy and Move Semantics
// w3.cpp

#include <iostream>
#include <iomanip>
#include <utility>
#include <ctime>
#include "Text.h"
#define TIME(start, end) double((end) - (start)) / CLOCKS_PER_SEC

int main(int argc, char* argv[]) {
   if (argc == 1) {
      std::cerr << argv[0] << ": missing file operand\n";
      return 1;
   }
   else if (argc != 2) {
      std::cerr << argv[0] << ": too many arguments\n";
      return 2;
   }
   std::clock_t cs, ce;
   {
      std::cout << std::fixed << std::setprecision(3);
      cs = std::clock();
      w3::Text a;
      ce = std::clock();
      std::cout << "Constructor      " << TIME(cs, ce) << " seconds";
      std::cout << " - a.size = " << a.size() << std::endl;

      cs = std::clock();
      w3::Text b(argv[1]);
      ce = std::clock();
      std::cout << "Constructor      " << TIME(cs, ce) << " seconds";
      std::cout << " - b.size = " << b.size() << std::endl;

      cs = std::clock();
      a = b;
      ce = std::clock();
      std::cout << "Copy Assignment  " << TIME(cs, ce) << " seconds";
      std::cout << " - a.size = " << a.size() << std::endl;

      cs = std::clock();
      a = std::move(b);
      ce = std::clock();
      std::cout << "Move Assignment  " << TIME(cs, ce) << " seconds";
      std::cout << " - a.size = " << a.size() << std::endl;

      cs = std::clock();
      w3::Text c = a;
      ce = std::clock();
      std::cout << "Copy Constructor " << TIME(cs, ce) << " seconds";
      std::cout << " - c.size = " << c.size() << std::endl;

      cs = std::clock();
      w3::Text d = std::move(a);
      ce = std::clock();
      std::cout << "Move Constructor " << TIME(cs, ce) << " seconds";
      std::cout << " - d.size = " << d.size() << std::endl;

      cs = std::clock();
   }
   ce = std::clock();
   std::cout << "Destructor       " << TIME(cs, ce) << " seconds\n";
}#pragma once

#include <fstream>
#include <iostream>
#include <string>

namespace w3 {

   class Text{
      size_t count;
      std::string* lineTable;

   public:
      size_t size();

      void dump();

      ~Text();

      Text();

      Text(char* f);

      Text(const Text& rhs);

      Text(Text&& rhs);

      Text& operator= (const Text& rhs);

      Text&& operator= (Text&& rhs);
   };
};#include <iostream>
#include <iomanip>
#include <utility>
#include "Text.h"

using namespace w3;

size_t Text::size() { return count; }

void Text::dump() {
   size_t number = count;
   if (number > 10) number = 10;
   for (size_t i = 0; i < number; i++) {
      std::cout << "   line " << i + 1 << "--->" << lineTable[i] << "<--\n";
   }
}

Text::~Text() {
   delete[] lineTable;
}

Text::Text()
   : count(0), lineTable(nullptr) {}

Text::Text(char* f)
   : count(0) {
   std::fstream in(f, std::ios::in);
   if (in.is_open()) {
      std::string line;
      while (getline(in, line)) {
         count++;
      }
      std::cout << "file '" << f << "' contains " << count << " lines\n";

      lineTable = new std::string[count];

      std::cout << in.good() << "<-- good: true if none of the flags is set\n";
      std::cout << in.fail() << "<-- fail: true if ios::failbit or ios::badbit is true\n";
      std::cout << in.eof() << "<-- eof: true if ios::eofbit is true\n";
      std::cout << in.bad() << "<-- bad: true if ios::badit is true\n";

      std::cout << "clearing all status flags\n";
      in.clear();

      std::cout << in.good() << "<-- good: true if none of the flags is set\n";
      std::cout << in.fail() << "<-- fail: true if ios::failbit or ios::badbit is true\n";
      std::cout << in.eof() << "<-- eof: true if ios::eofbit is true\n";
      std::cout << in.bad() << "<-- bad: true if ios::badit is true\n";

      in.seekp(0);

      for (size_t i = 0; i < count; i++) {
         getline(in, lineTable[i]);
         auto cr = lineTable[i].find('\r');
         if (cr != std::string::npos)
            lineTable[i].erase(cr);
      }

      in.close();

      dump();
   }
   else {
      std::cerr << "Cannot open file '" << f << "'\n";
      exit(3);
   }
}

Text::Text(const Text& rhs)
   :count(0), lineTable(nullptr) {
   *this = rhs;
}

Text::Text(Text&& rhs)
   : count(0), lineTable(nullptr) {
   *this = std::move(rhs);
}

Text& Text::operator= (const Text& rhs) {
   if (this != &rhs) {
      delete[] lineTable;
      lineTable = nullptr;
      count = 0;

      count = rhs.count;

      lineTable = new std::string[count];
      for (size_t i = 0; i < count; i++)
         lineTable[i] = rhs.lineTable[i];
   }
   return *this;
}

Text&& Text::operator= (Text&& rhs) {
   if (this != &rhs) {
      delete[] lineTable;

      lineTable = rhs.lineTable;
      count = rhs.count;

      rhs.lineTable = nullptr;
      rhs.count = 0;
   }
   return std::move(*this);
}


szhang146@matrix:~/Semester3/oop345/lab3> g++ -o w3 -std=c++0x w3.cpp Text.cpp
szhang146@matrix:~/Semester3/oop345/lab3> w3 gutenberg_shakespeare
Constructor      0.000 seconds - a.size = 0
file 'gutenberg_shakespeare' contains 124455 lines
0<-- good: true if none of the flags is set
1<-- fail: true if ios::failbit or ios::badbit is true
1<-- eof: true if ios::eofbit is true
0<-- bad: true if ios::badit is true
clearing all status flags
1<-- good: true if none of the flags is set
0<-- fail: true if ios::failbit or ios::badbit is true
0<-- eof: true if ios::eofbit is true
0<-- bad: true if ios::badit is true
   line 1--->This is the 100th Etext file presented by Project Gutenberg, and<--
   line 2--->is presented in cooperation with World Library, Inc., from their<--
   line 3--->Library of the Future and Shakespeare CDROMS.  Project Gutenberg<--
   line 4--->often releases Etexts that are NOT placed in the Public Domain!!<--
   line 5---><--
   line 6--->Shakespeare<--
   line 7---><--
   line 8--->*This Etext has certain copyright implications you should read!*<--
   line 9---><--
   line 10---><<THIS ELECTRONIC VERSION OF THE COMPLETE WORKS OF WILLIAM<--
Constructor      0.120 seconds - b.size = 124455
Copy Assignment  0.010 seconds - a.size = 124455
Move Assignment  0.010 seconds - a.size = 124455
Copy Constructor 0.010 seconds - c.size = 124455
Move Constructor 0.000 seconds - d.size = 124455
Destructor       0.020 seconds
szhang146@matrix:~/Semester3/oop345/lab3> exit
exit

Script done on Mon 06 Feb 2017 10:28:59 PM EST

Script started on Wed 12 Apr 2017 11:58:45 AM EDT
szhang146@matrix:~/Semester3/oop345/milestone3> 
szhang146@matrix:~/Semester3/oop345/milestone3> whoami
szhang146
szhang146@matrix:~/Semester3/oop345/milestone3> 
szhang146@matrix:~/Semester3/oop345/milestone3> cat order.cpp util.cpp util.h
#include <iostream>
#include <fstream>
#include <vector> 
#include <string>
#include "util.h"

using namespace std;


class Order {
  string orderCustomer, orderProduct;
  vector<string> itemList;
public:
  Order( vector<string> row)
  {
     if (row.size() < 3) {
        throw std::string("Expected 3 or more fields, found ") + std::to_string(row.size());
     }
     if (validCustomerName(row[0])) {
        orderCustomer = row[0];
     }
     else {
        throw std::string("Expected a customer name --- found '") + row[0] + "'";
     }

     if (validProductName(row[1])) {
        orderProduct = row[1];
     }
     else {
        throw std::string("Expected a customer name --- found '") + row[1] + "'";
     }

     for (auto i = 2; i < row.size(); i++) {
        if (validItemName(row[i]))
           itemList.push_back(row[i]);
        else
           throw std::string("Expected a customer name --- found '") + row[i] + "'";
     }
  }
  void print()
  {
     std::cout << " /Customer/Product/Items .../ = "
        << "/" << orderCustomer
        << "/" << orderProduct
        ;

     for (auto item : itemList)
        std::cout << "/" << item;
     std::cout << "\n";
  }
  void graph( fstream& os )
  {
     std::string q = "\"";
     for (auto item : itemList)
        os << q << orderCustomer + ":" + orderProduct << q << " -> " << q << item << q << "[color=blue];\n";
  }
};

class OrderManager {
  vector< Order > orderList;
public:
  OrderManager( vector < vector< string > > & csvData)
  {
     for (auto& row : csvData) {
        try {
           if (row.size() > 2)
              orderList.push_back(std::move(Order(row)));
        }
        catch (const std::string& e) {
           std::cerr << e << "\n";
        }
     }
  }
  void print()
  {
     for (auto e : orderList)
        e.print();
  }
  void graph(string& filename)
  {
     std::string f = filename + ".gv";
     std::fstream os(f, std::ios::out | std::ios::trunc);
     os << "digraph orderGraph {\n";

     for (auto t : orderList) {
        t.graph(os);
     }

     os << "}\n";

     os.close();

     std::string cmd = std::string("dot -Tpng ") + filename + ".gv > " + filename + ".gv.png";

     std::cout << cmd << " returned " << system(cmd.c_str()) << "\n";
  }

};

int main(int argc, char*argv[])
{
  try {
    if(argc != 3) {
      throw string("Usage ") + argv[0] + string(": filename delimiter-char");
    }

    string filename  = string(argv[1]);     // 1st arg is filename
    char   delimiter = argv[2][0];  // 2nd arg, 1st char is delimiter

    vector < vector< string > > csvOrderData;
    csvReader(filename, delimiter, csvOrderData);

    // csvPrint(csvOrderData);

    OrderManager om(csvOrderData);
    om.print();
    om.graph(filename);

  } catch (const string& e) {
    cerr << e << "\n";
  }
}
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include "util.h"
std::string& trim(std::string& s, char trimChar)
{
   while (!s.empty() && s[0] == trimChar)
      s.erase(0, 1);

   while (!s.empty() && s[s.size() - 1] == trimChar)
      s.erase(s.size() - 1, 1);

   return s;
}

#define PROCESS_DOUBLE_QUOTES
void csvReader(std::string& filename, char delim, std::vector< std::vector<std::string> > &csv)
{
   std::ifstream is(filename);
   if (is) {
      std::string line;
      std::vector<std::string> fields;

      while (getline(is, line)) {
         auto cr = line.find('\r');
         if (cr != std::string::npos)
            line.erase(cr, 1);

         std::string field;
         for (size_t i = 0; i < line.size(); i++) {
#ifdef PROCESS_DOUBLE_QUOTES
            if (line[i] == '"') {
               field += line[i];        // copy 1st "
               for (i++; i < line.size(); i++) {
                  field += line[i];
                  if (line[i] == '"')     // found 2nd "
                     break;
               }
            }
            else
#endif
               if (line[i] != delim) {
                  field += line[i];
               }
               else {
                  trim(field);
                  if (!field.empty())
                     fields.push_back(move(field));
                  // field.clear(); // not needed if we do a move
               }
         }
         trim(field);
         if (!field.empty())
            fields.push_back(field);
         if (!fields.empty())
            csv.push_back(move(fields));
         // field.clear(); // not needed if we do a move
      }
      is.close();
   }
   else {
      std::cerr << "cannot open file " << filename << "\n";
   }
}

void csvPrint(std::vector< std::vector<std::string> > &csv)
{


   // Method 1 - range-based for loop: 
   for (auto row : csv) {
      for (auto column : row) {
         std::cout << column << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";

   // Method 2 - conventional for loop
   for (size_t row = 0; row < csv.size(); row++) {
      for (size_t column = 0; column < csv[row].size(); column++) {
         std::cout << csv[row][column] << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";

   // Method 3 - iterator for loop
   for (auto row = csv.begin(); row < csv.end(); row++) {
      for (auto column = row->begin(); column < row->end(); column++) {
         std::cout << *column << " ";
      }
      std::cout << "\n";
   }
   std::cout << "\n";
}
bool validTaskName(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}

bool validSlots(std::string &s) {
   for (auto c : s)
      if (!(isdigit(c)))
         return false;
   return true;
}
bool validCustomerName(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}
bool validProductName(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}
bool validItemName(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}
bool validItemSequence(std::string &s) {
   for (auto c : s)
      if (!(isalnum(c) || c == ' '))
         return false;
   return true;
}#pragma once
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

std::string& trim(std::string& s, char trimChar = ' ');

void csvReader(std::string& filename, char delim, std::vector< std::vector<std::string> > &csv);

void csvPrint(std::vector< std::vector< std::string >> &csvData);

bool validTaskName(std::string &s);
bool validSlots(std::string &s);
bool validItemSequence(std::string& s);
bool validCustomerName(std::string& s);
bool validProductName(std::string& s);
bool validItemName(std::string& s);szhang146@matrix:~/Semester3/oop345/milestone3> 
szhang146@matrix:~/Semester3/oop345/milestone3> 
szhang146@matrix:~/Semester3/oop345/milestone3> g++ -std=c++0x util.cpp order.cpp -o m3order
szhang146@matrix:~/Semester3/oop345/milestone3> 
szhang146@matrix:~/Semester3/oop345/milestone3> ./m3order dat/CustomerOrders_Clean.dat      '|'
 /Customer/Product/Items .../ = /Fardad Soleimanloo/Dell Precision 3600/CPU/Memory/Memory
 /Customer/Product/Items .../ = /Joseph Hughes/HP Z230/CPU/Memory
 /Customer/Product/Items .../ = /Chris Szalwinski/HP Z350/CPU/Memory/SSD/GPU
 /Customer/Product/Items .../ = /Elliott Coleshill/HP Apollo 1000/CPU/MEMORY/Power Supply/GPU
dot -Tpng dat/CustomerOrders_Clean.dat.gv > dat/CustomerOrders_Clean.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone3> ./m3order dat/CustomerOrders_Whitespace.dat '|'
 /Customer/Product/Items .../ = /Fardad Soleimanloo/Dell Precision 3600/CPU/Memory/Memory
 /Customer/Product/Items .../ = /Joseph Hughes/HP Z230/CPU/Memory
 /Customer/Product/Items .../ = /Chris Szalwinski/HP Z350/CPU/Memory/SSD/GPU
 /Customer/Product/Items .../ = /Elliott Coleshill/HP Apollo 1000/CPU/MEMORY/Power Supply/GPU
dot -Tpng dat/CustomerOrders_Whitespace.dat.gv > dat/CustomerOrders_Whitespace.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone3> ./m3order dat/CustomerOrders_Malformed.dat  '|'
 /Customer/Product/Items .../ = /Fardad Soleimanloo/Dell Precision 3600/CPU/Memory/Memory
 /Customer/Product/Items .../ = /Joseph Hughes/HP Z230/CPU/Memory
 /Customer/Product/Items .../ = /Chris Szalwinski/HP Z350/CPU/Memory/SSD/GPU
 /Customer/Product/Items .../ = /Elliott Coleshill/HP Apollo 1000/CPU/MEMORY/Power Supply/GPU
dot -Tpng dat/CustomerOrders_Malformed.dat.gv > dat/CustomerOrders_Malformed.dat.gv.png returned 0
szhang146@matrix:~/Semester3/oop345/milestone3> exit
exit

Script done on Wed 12 Apr 2017 11:59:31 AM EDT
